<?php

namespace atk4\ui\tests;

use atk4\data\Model;
use atk4\ui\App;
use atk4\ui\Form;

class FormTest extends \atk4\core\PHPUnit_AgileTestCase
{
    /** @var Form */
    public $f;

    /** @var string */
    public $f_error;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->f = new \atk4\ui\Form();
        $this->f->app = new AppMockFT([
            'catch_exceptions'        => false,
            'always_run'              => false,
            'catch_runaway_callbacks' => false,
        ]);
        $this->f->init();
    }

    /**
     * Some tests for form.
     */
    public function testGetField()
    {
        $f = $this->f;
        $f->addField('test');

        $this->assertTrue($f->getField('test') instanceof \atk4\ui\FormField\Generic);
        $this->assertInstanceOf(\atk4\ui\FormField\Generic::class, $f->layout->getField('test'));
    }

    public function assertSubmit(array $post_data, callable $submit = null, callable $check_expected_error = null)
    {
        $submit_called = false;
        $_POST = $post_data;
        $_POST['atk_submit'] = 'ajax';

        $this->f->onSubmit(function ($f) use (&$submit_called, $submit) {
            $submit_called = true;
            if ($submit) {
                call_user_func($submit, $f->model);
            }
        });

        $this->f->render();
        $res = json_decode($this->f->app->output, true);

        if ($check_expected_error) {
            $this->assertFalse($submit_called, 'Expected submission to fail, but it was successful!');
            $this->assertNotEquals('', $res['atkjs']); // will output useful error
            $this->f_error = $res['atkjs'];

            call_user_func($check_expected_error, $res['atkjs']);
        } else {
            $this->assertTrue($submit_called, 'Expected submission to be successful but it failed');
            $this->assertEquals('', $res['atkjs']); // will output useful error
        }

        unset($this->f);   // we shouldn't submit from twice!

        $_POST = [];
    }

    public function testFormSubmit()
    {
        $f = $this->f;

        $m = new Model();
        $m->addField('name', ['default'=>'John']);
        $m->addField('email', ['required'=>true]);
        $m->addField('is_admin', ['default'=>false]);

        $f->setModel($m, ['name', 'email']);

        $this->assertEquals('John', $f->model->get('name'));

        // fake some POST data
        $this->assertSubmit(['email'=>'john@yahoo.com', 'is_admin'=>'1'], function ($m) {

            // field has default, but form didn't send value back
            $this->assertEquals(null, $m['name']);

            $this->assertEquals('john@yahoo.com', $m['email']);

            // security check, unspecified field must not be changed
            $this->assertEquals(false, $m['is_admin']);
        });
    }

    public function testTextArea()
    {
        $this->f->addField('TextArea');
        $this->assertSubmit(['TextArea'=>'0'], function ($m) {
            $this->assertSame('0', $m['TextArea']);
        });
    }

    public function assertSubmitError(array $post, callable $error_callback)
    {
        $this->assertSubmit($post, null, $error_callback);
    }

    public function assertFieldError(string $field, string $error)
    {
        $matched = false;

        preg_replace_callback('/form\("add prompt","([^"]*)","([^"]*)"\)/', function ($matches) use ($error, $field, &$matched) {
            if ($matches[1] == $field) {
                $this->assertContains($error, $matches[2], 'Regarding field '.$field.' error message');

                $matched = true;
            }
        }, $this->f_error);

        $this->assertTrue($matched, 'Field '.$field.' did not produce error');
    }

    public function assertFieldNoErrors(string $field)
    {
        preg_replace_callback('/form\("add prompt","([^"]*)","([^"]*)"\)/', function ($matches) use ($field, &$matched) {
            if ($matches[1] == $field) {
                $this->fail('Field '.$field.' unexpected error: '.$matches[2]);
            }
        }, $this->f_error);
    }

    public function testSubmitError()
    {
        $m = new Model();

        $options = ['0'=>'yes please', '1'=>'woot'];

        $m->addField('opt1', ['values'=>$options]);
        $m->addField('opt2', ['values'=>$options]);
        $m->addField('opt3', ['values'=>$options, 'required'=>true]);
        //$m->addField('opt3_zerotest', ['values'=>$options, 'required'=>true]);
        $m->addField('opt4', ['values'=>$options, 'mandatory'=>true]);

        $this->f->setModel($m);
        $this->assertSubmitError(['opt1'=>'2', 'opt3'=>'', 'opt3_zerotest'=>'0'], function ($error) {

            // dropdown validates to make sure option is proper
            $this->assertFieldError('opt1', 'not one of the allowed values');

            // user didn't select any option here
            $this->assertFieldNoErrors('opt2');

            // dropdown insists for value to be there
            $this->assertFieldError('opt3', 'Must not be empty');

            // value with '0' is valid selection
            // TODO: currently fails!! See https://github.com/atk4/ui/issues/781
            //$this->assertFieldNoErrors('opt3_zerotest');

            // mandatory will error during save(), but form does not care about it. This is normal
            // as there may be further changes to this field on beforeSave hook...
            $this->assertFieldNoErrors('opt4');
        });
    }
}

class AppMockFT extends App
{
    public $output;

    public function terminate($output = null)
    {
        $this->output = $output;
        // do nothing!
    }
}
